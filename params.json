{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Resque-sliders","tagline":"A Resque plugin that enables complete control over your running Resque Workers, all from the Resque-Web UI ","google":"","body":"Resque Sliders [![Build Status](https://secure.travis-ci.org/kmullin/resque-sliders.png)](http://travis-ci.org/kmullin/resque-sliders)\r\n==============\r\n\r\n[github.com/kmullin/resque-sliders](https://github.com/kmullin/resque-sliders)\r\n\r\n\r\nDescription\r\n-----------\r\n\r\nResqueSliders is a [Resque](https://github.com/defunkt/resque) plugin which allows you\r\nto control Resque workers from the Web-UI.\r\n\r\nFrom the Resque-Web UI, you can:\r\n\r\n* Start workers with any queue, or combination of queues on any host, and specify how many of each should be running\r\n* Pause / Stop / Restart ALL running workers\r\n\r\nResqueSliders comes in two parts:\r\n\r\n* `KEWatcher`: A daemon that runs on any machine that needs to run Resque workers, watches over the workers and controls which ones are running\r\n* `Resque-Web Plugin`: A bunch of slider bars, with text-input box to specify what queues to run on the workers\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nInstall as a gem:\r\n\r\n    $ gem install resque-sliders\r\n\r\n### KEWatcher\r\n\r\nThis is the daemon component that runs on any host that you want to run Resque workers on. The daemon's job is to manage **how many** Resque workers should be running, and **what** they should be running. It also provides an easy way to stop all workers during maintenance or deploys.\r\n\r\nWhen the daemon first runs, it will register itself, by hostname with Redis:\r\n\r\n* Adds a few persistent settings to the hash key `resque:plugins:resque-sliders:host_configs` (max_children, current_children)\r\n* Gets any queues that need to be running on the host by looking at `resque:plugins:resque-sliders:` + `hostname`\r\n\r\n```\r\nUsage: kewatcher [options]\r\n\r\nOptions:\r\n    -c, --config CONFIG              Resque Config (Yaml)\r\n    -r, --rakefile RAKEFILE          Rakefile location\r\n    -p, --pidfile PIDFILE            PID File location\r\n    -f, --force                      FORCE KILL ANY OTHER RUNNING KEWATCHERS\r\n    -v, --verbose                    Verbosity (Can be specified more than once, -vv)\r\n    -m, --max MAX                    Max Children (default: 10)\r\n    -w, --wait WAIT_TIME             Time (in seconds) to wait for worker to die before sending TERM signal (default: 20 seconds)\r\n    -t, --time MAX_TIME              Max Time (in seconds) to wait for worker to die before sending KILL (-9) signal (FORCE QUIT) (default: 60)\r\n                                     NOTE: With Resque >= 1.22.0 force quit is handled for you so by default this is the same as:\r\n                                           RESQUE_TERM_TIMEOUT=40 or the difference of MAX_TIME and WAIT_TIME\r\n                                           more info: http://hone.heroku.com/resque/2012/08/21/resque-signals.html\r\n    -a, --async                      Do NOT wait for Resque workers to die completely before spawning new workers (default: false)\r\n    -V, --version                    Prints Version\r\n```\r\n\r\n#### Important Options\r\n\r\n```\r\n    -m|--max MAX            (Max Children): Maximum number of workers to run on host (default: 10)\r\n    -w|--wait WAIT_TIME     (Wait Time): How long to wait before sending TERM to zombies (default: 20 seconds)\r\n    -t|--time TIME          (Total Time): How long to wait before sending KILL to zombies (default: 60 seconds)\r\n                            NOTE: Resque >= 1.22.0 includes signal handling of its own to force quit, so we use it if its there, and override with our own timeout here\r\n    -a|--async              (Async): Should we spawn new workers before old ones have fully terminated (default: false)\r\n    -r|--rakefile RAKEFILE  (Rakefile): Pass along a rakefile to use when calling rake ... resque:work - shouldn't be needed if run from project directory\r\n    -f|--force              (Force): Force any currently running KEWatcher processes to quit, waiting for it to do so, and starting in its place\r\n                            RAILS_ENV: If you're using rails, you need to set your RAILS_ENV variable\r\n```\r\n\r\n#### Controlling the Daemon\r\n\r\nOnce the daemon is running on each host that is going to run Resque workers, you'll need to tell them which queues to run.\r\n\r\n#### Signals\r\n\r\nKEWatcher supports all the [same signals as Resque](https://github.com/defunkt/resque#signals):\r\n\r\n* `TERM` / `INT` / `QUIT` - Shutdown. Gracefully kill all child Resque workers, and wait for them to finish before exiting\r\n* `HUP`  - Restart all Resque workers by gracefully killing them, and starting new ones in their place\r\n* `USR1` - Stop all Resque workers, and don't start any more\r\n* `USR2` - Pause spawning of new queues, but leave current ones running\r\n* `CONT` - Unpause. Continue spawning/managing child Resque workers\r\n\r\nThe queue configuration is done via Resque-Web interface\r\n\r\n#### Resque-Web\r\n\r\nSee below for screenshots\r\n\r\nButtons:\r\n\r\n* `Play` / `Pause` - Start or Pause\r\n* `Stop` - Stop all workers\r\n* `Reload` - Sends HUP signal to running KEWatcher\r\n\r\n\r\n### Resque-Web Integration\r\n\r\n**Main Screen:** showing 3 hosts, and showing that one of the nodes is not running KEWatcher\r\n![Screen 1](https://github.com/kmullin/resque-sliders/raw/master/misc/resque-sliders_main-view.png)\r\n\r\n**Host Screen:** showing different `QUEUE` combinations (comma separated) and slider bars indicating how many of each of them should run\r\n![Screen 2](https://github.com/kmullin/resque-sliders/raw/master/misc/resque-sliders_host-view.png)\r\n\r\nTo enable the Resque-Web Integration you'll need to load ResqueSliders to enable the Sliders tab. Just add:\r\n\r\n```ruby\r\nrequire 'resque-sliders'\r\n```\r\nto a file, like resque-web_init.rb, and run resque-web:\r\n\r\n    resque-web resque-web_init.rb\r\n\r\n\r\nWorks on\r\n--------\r\n\r\n`resque-sliders` has been tested on the following platforms:\r\n\r\n#### Ruby\r\n\r\n* 1.9.3\r\n* 1.8.7 (ree)\r\n* probabaly more...\r\n\r\nContributing\r\n------------\r\n\r\nWant to fix a bug? See a new feature?\r\n\r\n1. [Fork](https://github.com/kmullin/resque-sliders/fork_select) me\r\n2. Create a new branch\r\n3. Open a [Pull Request](https://github.com/kmullin/resque-sliders/pull/new)\r\n"}